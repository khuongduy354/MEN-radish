openapi: 3.0.0
info:
  title: Radish
  version: 1.0.0
servers:
  - url: http://{{base_url}}
tags:
  - name: Post
  - name: Subreddit
  - name: User
  - name: Comments
paths:
  /v1/posts:
    get:
      tags:
        - Post
      summary: Get all posts
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/search:
    get:
      tags:
        - Post
      summary: Get posts on search
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/{id}:
    get:
      tags:
        - Post
      summary: Get one detailed post
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    put:
      tags:
        - Post
      summary: Update post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: token
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    delete:
      tags:
        - Post
      summary: Delete post
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/posts/subscribed/{username}:
    get:
      tags:
        - Post
      summary: Get subscribed posts
      parameters:
        - name: Authorization
          in: header
          schema:
            type: string
          example: token here
        - name: username
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post:
    post:
      tags:
        - Post
      summary: Create new post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/upvote/{id}:
    post:
      tags:
        - Post
      summary: Upvote post
      requestBody:
        content: {}
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/downvote/{id}:
    post:
      tags:
        - Post
      summary: Downvote post
      requestBody:
        content: {}
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/subreddits:
    get:
      tags:
        - Subreddit
      summary: Get all subreddits
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/subreddit/{subredditName}:
    get:
      tags:
        - Subreddit
      summary: Get one detailed subreddit
      parameters:
        - name: subredditName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    patch:
      tags:
        - Subreddit
      summary: Update subreddit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: token
                description: ''
      parameters:
        - name: subredditName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
    post:
      tags:
        - Subreddit
      summary: Subscribe subreddit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: ''
      parameters:
        - name: subredditName
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/subreddit:
    post:
      tags:
        - Subreddit
      summary: Create new subreddit
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                token: ''
                name: ''
                description: ''
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/user/signup:
    post:
      tags:
        - User
      summary: Signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: someone
                password: something
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/user/login:
    post:
      tags:
        - User
      summary: Login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                username: someone
                password: something
      parameters:
        - name: Content-Type
          in: header
          schema:
            type: string
          example: application/json
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/users/{username}:
    get:
      tags:
        - User
      summary: Get User
      parameters:
        - name: username
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/users/avatar:
    post:
      tags:
        - User
      summary: Upload Avatar
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  format: binary
                username:
                  type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/comments/{comment_id}/downvote:
    post:
      tags:
        - Comments
      summary: Downvote Comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                author: username
      parameters:
        - name: postId
          in: query
          schema:
            type: string
          example: '{{postId}}'
        - name: comment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/comments/{comment_id}:
    patch:
      tags:
        - Comments
      summary: Edit comment
      requestBody:
        content: {}
      parameters:
        - name: postId
          in: query
          schema:
            type: string
          example: '{{postId}}'
        - name: comment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/comments/{comment_id}/upvote:
    post:
      tags:
        - Comments
      summary: Upvote comment
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                author: username
      parameters:
        - name: postId
          in: query
          schema:
            type: string
          example: '{{postId}}'
        - name: comment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/{post_id}/comment:
    post:
      tags:
        - Comments
      summary: Comment post
      requestBody:
        content:
          application/json:
            schema:
              type: object
              example:
                author: username
                content: asdfs
      parameters:
        - name: post_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
  /v1/post/comment/{comment_id}:
    delete:
      tags:
        - Comments
      summary: Delete comment
      parameters:
        - name: comment_id
          in: path
          schema:
            type: string
          required: true
      responses:
        '200':
          description: Successful response
          content:
            application/json: {}
